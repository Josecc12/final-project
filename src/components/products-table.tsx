/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/c6ZkCJqkvyb
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useMemo } from "react";
import { Input } from "@/components/ui/input";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuCheckboxItem,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Pagination } from "@/components/ui/pagination";
import { EllipsisVertical, ListFilter } from "lucide-react";

export function ProductsTable() {
  const [searchTerm, setSearchTerm] = useState("");
  const [sortColumn, setSortColumn] = useState("");
  const [sortDirection, setSortDirection] = useState("asc");
  const [filterCategory, setFilterCategory] = useState("");
  const [filterStock, setFilterStock] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const medicalSupplies = [
    {
      id: 1,
      quantity: 50,
      description: "Mascarillas quirúrgicas",
      category: "Equipos de protección",
      inStock: true,
    },
    {
      id: 2,
      quantity: 20,
      description: "Guantes de látex",
      category: "Equipos de protección",
      inStock: true,
    },
    {
      id: 3,
      quantity: 5,
      description: "Termómetros digitales",
      category: "Instrumentos médicos",
      inStock: false,
    },
    {
      id: 4,
      quantity: 100,
      description: "Vendas elásticas",
      category: "Suministros médicos",
      inStock: true,
    },
    {
      id: 5,
      quantity: 15,
      description: "Jeringas desechables",
      category: "Suministros médicos",
      inStock: true,
    },
    {
      id: 6,
      quantity: 30,
      description: "Alcohol isopropílico",
      category: "Suministros médicos",
      inStock: false,
    },
    {
      id: 7,
      quantity: 80,
      description: "Gasas estériles",
      category: "Suministros médicos",
      inStock: true,
    },
    {
      id: 8,
      quantity: 10,
      description: "Estetoscopios",
      category: "Instrumentos médicos",
      inStock: true,
    },
    {
      id: 9,
      quantity: 25,
      description: "Batas quirúrgicas",
      category: "Equipos de protección",
      inStock: true,
    },
    {
      id: 10,
      quantity: 40,
      description: "Apósitos adhesivos",
      category: "Suministros médicos",
      inStock: true,
    },
  ];
  const filteredSupplies = useMemo(() => {
    let filtered = medicalSupplies.filter((supply) => {
      return (
        supply.description.toLowerCase().includes(searchTerm.toLowerCase()) &&
        (filterCategory === "" || supply.category === filterCategory) &&
        (filterStock === "" ||
          (filterStock === "in_stock" && supply.inStock) ||
          (filterStock === "out_of_stock" && !supply.inStock))
      );
    });
    if (sortColumn) {
      filtered = filtered.sort((a, b) => {
        if (a[sortColumn] < b[sortColumn])
          return sortDirection === "asc" ? -1 : 1;
        if (a[sortColumn] > b[sortColumn])
          return sortDirection === "asc" ? 1 : -1;
        return 0;
      });
    }
    return filtered;
  }, [searchTerm, filterCategory, filterStock, sortColumn, sortDirection]);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredSupplies.slice(
    indexOfFirstItem,
    indexOfLastItem
  );
  const totalPages = Math.ceil(filteredSupplies.length / itemsPerPage);
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };
  return (
    <div className="p-4 sm:p-6">
      <div className="flex items-center mb-4">
        <div className="relative flex-1">
          <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            
            type="search"
            placeholder="Buscar..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-8 w-full"
          />
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm" className="ml-4 h-8 gap-1">
              <ListFilter  className="h-3.5 w-3.5" />
              <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                Filtrar
              </span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Filtrar por</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuCheckboxItem
              checked={filterCategory === ""}
              onCheckedChange={() => setFilterCategory("")}
            >
              Todas las categorías
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem
              checked={filterCategory === "Equipos de protecci\u00F3n"}
              onCheckedChange={() =>
                setFilterCategory("Equipos de protecci\u00F3n")
              }
            >
              Equipos de protección
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem
              checked={filterCategory === "Instrumentos m\u00E9dicos"}
              onCheckedChange={() =>
                setFilterCategory("Instrumentos m\u00E9dicos")
              }
            >
              Instrumentos médicos
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem
              checked={filterCategory === "Suministros m\u00E9dicos"}
              onCheckedChange={() =>
                setFilterCategory("Suministros m\u00E9dicos")
              }
            >
              Suministros médicos
            </DropdownMenuCheckboxItem>
            <DropdownMenuSeparator />
            <DropdownMenuCheckboxItem
              checked={filterStock === ""}
              onCheckedChange={() => setFilterStock("")}
            >
              Todos los estados
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem
              checked={filterStock === "in_stock"}
              onCheckedChange={() => setFilterStock("in_stock")}
            >
              En stock
            </DropdownMenuCheckboxItem>
            <DropdownMenuCheckboxItem
              checked={filterStock === "out_of_stock"}
              onCheckedChange={() => setFilterStock("out_of_stock")}
            >
              Agotado
            </DropdownMenuCheckboxItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <Card>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead
                  className="cursor-pointer"
                  onClick={() => handleSort("quantity")}
                >
                  Cantidad
                  {sortColumn === "quantity" && (
                    <span className="ml-1">
                      {sortDirection === "asc" ? "\u2191" : "\u2193"}
                    </span>
                  )}
                </TableHead>
                <TableHead
                  className="cursor-pointer"
                  onClick={() => handleSort("description")}
                >
                  Descripción
                  {sortColumn === "description" && (
                    <span className="ml-1">
                      {sortDirection === "asc" ? "\u2191" : "\u2193"}
                    </span>
                  )}
                </TableHead>
                
                <TableHead
                  className="cursor-pointer"
                  onClick={() => handleSort("category")}
                >
                  Categoría
                  {sortColumn === "category" && (
                    <span className="ml-1">
                      {sortDirection === "asc" ? "\u2191" : "\u2193"}
                    </span>
                  )}
                </TableHead>
                <TableHead>Estado de stock</TableHead>
                <TableHead/>
              </TableRow>
            </TableHeader>
            <TableBody>
              {currentItems.map((supply) => (
                <TableRow key={supply.id}>
                  <TableCell>{supply.quantity}</TableCell>
                  <TableCell>{supply.description}</TableCell>

                  <TableCell>{supply.category}</TableCell>
                  <TableCell>
                    <Badge

                      variant='outline'
                      className={`${
                        supply.inStock
                          ? "bg-green-500 text-green-50"
                          : "bg-yellow-500 text-yellow-50"
                      }`}
                    >
                      {supply.inStock ? "En stock" : "Agotado"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          

                          size="icon"
                          variant="ghost"
                        
                        >
                          
                          <EllipsisVertical />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>Acciones</DropdownMenuLabel>
                        <DropdownMenuItem>Editar</DropdownMenuItem>
                        <DropdownMenuItem>Eliminar</DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
        <CardFooter>
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        </CardFooter>
      </Card>
    </div>
  );
}
